int main(int argc, char** argv) {
    setvbuf(stdout, NULL, _IONBF, 0);

    int portnum = 9090;
    if (argc >= 2) {
        portnum = atoi(argv[1]);
    }
    printf("Serving on port %d\n", portnum);

    int listener_sockfd = listen_inet_socket(portnum);
    make_socket_non_blocking(listener_sockfd);

    if (listener_sockfd >= FD_SETSIZE) {
        die("Listener socket FD exceeds FD_SETSIZE limit.");
    }

    fd_set readfds_master, writefds_master;
    FD_ZERO(&readfds_master);
    FD_ZERO(&writefds_master);

    FD_SET(listener_sockfd, &readfds_master);
    int fdset_max = listener_sockfd;

    while (1) {
        fd_set readfds = readfds_master;
        fd_set writefds = writefds_master;

        int nready = select(fdset_max + 1, &readfds, &writefds, NULL, NULL);
        if (nready < 0) {
            perror_die("select");
        }

        for (int fd = 0; fd <= fdset_max && nready > 0; fd++) {
            if (FD_ISSET(fd, &readfds)) {
                nready--;

                if (fd == listener_sockfd) {
                    struct sockaddr_in peer_addr;
                    socklen_t peer_addr_len = sizeof(peer_addr);
                    int newsockfd = accept(listener_sockfd, (struct sockaddr*)&peer_addr, &peer_addr_len);
                    if (newsockfd < 0) {
                        if (errno == EAGAIN || errno == EWOULDBLOCK) continue;
                        perror_die("accept");
                    }

                    if (newsockfd >= MAXFDS) {
                        close(newsockfd);
                        continue;
                    }

                    make_socket_non_blocking(newsockfd);
                    FD_SET(newsockfd, &readfds_master);
                    if (newsockfd > fdset_max) fdset_max = newsockfd;

                    on_peer_connected(newsockfd, &peer_addr, peer_addr_len);
                } else {
                    fd_status_t status = on_peer_ready_recv(fd);
                    if (!status.want_read) FD_CLR(fd, &readfds_master);
                    if (status.want_write) FD_SET(fd, &writefds_master);
                }
            }

            if (FD_ISSET(fd, &writefds)) {
                nready--;

                fd_status_t status = on_peer_ready_send(fd);
                if (!status.want_read) FD_CLR(fd, &readfds_master);
                if (!status.want_write) FD_CLR(fd, &writefds_master);

                if (!status.want_read && !status.want_write) {
                    close(fd);
                    if (fd == fdset_max) {
                        while (fdset_max > 0 && !FD_ISSET(fdset_max, &readfds_master)) {
                            fdset_max--;
                        }
                    }
                }
            }
        }
    }

    close(listener_sockfd);
    return 0;
}
